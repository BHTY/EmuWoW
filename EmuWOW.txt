EmuWOW Project Overview

What is the PEB/TEB used for, anyway?
	The TEB is stored at address 
	The PEB stores loaded libraries and 
	Command line
	

Multithreading
	MIPS state is stored in the TLS. If a new thread is started, there's no CPU state in the TLS, so a new CPU context is born.


LoadLibrary should be hooked

EMUWOW.C
	The main module for EmuWOW. Loads the desired EXE image, handles any PEB/TEB initialization and setting the command line.
	Starts execution
	Includes the emulated->native call bridge

NAT_EMU.C
	Exception handling code that invokes MIPS emulation from the current PC

MIPS.C
	The MIPS emulator.
	The implementation for the NATIVECALL instruction grabs the 16 MIPS arguments and then calls ExecuteNativeFunction
		NATIVECALL also does the work of a JR $RA and bypasses the delay slot

MIPS_D.C
	The disassembler for MIPS.

MIPS_CPU.C
	Any routines that allow the MIPS CPU to interface with the rest of EmuWoW are stored here. Fundementally, the following
	functions are needed:
	- Create new CPU context
	- Execute emulated subroutine with given parameters and return the $v0 register contents
		(Used for Native -> Emulated callbacks)
		Stores current $ra and current $pc into variables
		Stores 0xFFFFFFFF into $ra, set target address into $pc, set args, start executing
		When it returns to 0xFFFFFFFF, we're done. Restore old $ra and $pc.
		
PE.C
	Generic functions for mapping a PE image into memory (and writing sections)
	Handles putting images into the PEB data structures?
	Has a generic "LoadLibrary" that tries to load a MIPS DLL if available, and a native DLL if none is available

PE_EMU.C
	Loads a MIPS DLL. Performs proper relocation & import resolution, calling entry points.

PE_NATIVE.C
	Loads a PE DLL and stubs out the code with NATIVECALL